use stream_protocol_lib::ref_index_generator::RefIndexGenerator;
use stream_protocol_lib::chunkers::json_protocol_chunker::JsonProtocolChunker;

#[test]
fn test_json_chunk_iter() {
    use serde_json::json;

    let json_to_test = [
        (
            json!({"key1": "value_1", "key2":"value_2"}),
            [
                r#"0={}"#,
                r#"0+={"key1":"$ke$1"}"#,
                r#"1="va""#,
                r#"1+="lu""#,
                r#"1+="e_""#,
                r#"1+="1""#,
                r#"0+={"key2":"$ke$2"}"#,
                r#"2="va""#,
                r#"2+="lu""#,
                r#"2+="e_""#,
                r#"2+="2""#
            ].to_vec()
        ),
        (
            json!(["array_el_1", "array_el_2", "array_el_3"]),
            [
                r#"0=[]"#,
                r#"0+="$ke$1""#,
                r#"1="ar""#,
                r#"1+="ra""#,
                r#"1+="y_""#,
                r#"1+="el""#,
                r#"1+="_1""#,
                r#"0+="$ke$2""#,
                r#"2="ar""#,
                r#"2+="ra""#,
                r#"2+="y_""#,
                r#"2+="el""#,
                r#"2+="_2""#,
                r#"0+="$ke$3""#,
                r#"3="ar""#,
                r#"3+="ra""#,
                r#"3+="y_""#,
                r#"3+="el""#,
                r#"3+="_3""#
            ].to_vec()
        ),
        (
            // A string smaller than the buffer
            json!("a"),
            [
                r#"0="a""#,
            ].to_vec()
        ),
        (
            // A string larger than the buffer
            json!("just a string"),
            [
                r#"0="ju""#,
                r#"0+="st""#,
                r#"0+=" a""#,
                r#"0+=" s""#,
                r#"0+="tr""#,
                r#"0+="in""#,
                r#"0+="g""#
            ].to_vec()
        ),
        (
            json!(123.456), // A number
            [
                r#"0=123.456"#,
            ].to_vec()
        ),
        (
            // A nested object
            json!({
                "grandparent": {
                    "parent": [
                        "child1",
                        "child2"
                    ],
                    "uncle": "Sam"
                }
            }),
            [
                r#"0={}"#,
                r#"0+={"grandparent":"$ke$1"}"#,
                r#"1={}"#,
                r#"1+={"parent":"$ke$2"}"#,
                r#"2=[]"#,
                r#"2+="$ke$3""#,
                r#"3="ch""#,
                r#"3+="il""#,
                r#"3+="d1""#,
                r#"2+="$ke$4""#,
                r#"4="ch""#,
                r#"4+="il""#,
                r#"4+="d2""#,
                r#"1+={"uncle":"$ke$5"}"#,
                r#"5="Sa""#,
                r#"5+="m""#,
            ].to_vec()
        ),
        (
            // A big test
            json!({
                "num": 1,
                "level_1": {
                    "each_val": {
                        "str": "a_string",
                        "num": 123,
                        "null": null,
                        "bool": true,
                        "arr": [
                            "a",
                            "val1",
                            "val2",
                        ],
                        "obj": {
                            "some": "obj",
                        }
                    },
                    "uncle": "Sam"
                }
            }),
            [
                r#"0={}"#,
                r#"0+={"num":"$ke$1"}"#,
                r#"1=1"#,
                r#"0+={"level_1":"$ke$2"}"#,
                r#"2={}"#,
                r#"2+={"each_val":"$ke$3"}"#,
                r#"3={}"#,
                r#"3+={"str":"$ke$4"}"#,
                r#"4="a_""#,
                r#"4+="st""#,
                r#"4+="ri""#,
                r#"4+="ng""#,
                r#"3+={"num":"$ke$5"}"#,
                r#"5=123"#,
                r#"3+={"null":"$ke$6"}"#,
                r#"6=null"#,
                r#"3+={"bool":"$ke$7"}"#,
                r#"7=true"#,
                r#"3+={"arr":"$ke$8"}"#,
                r#"8=[]"#,
                r#"8+="$ke$9""#,
                r#"9="a""#,
                r#"8+="$ke$10""#,
                r#"10="va""#,
                r#"10+="l1""#,
                r#"8+="$ke$11""#,
                r#"11="va""#,
                r#"11+="l2""#,
                r#"3+={"obj":"$ke$12"}"#,
                r#"12={}"#,
                r#"12+={"some":"$ke$13"}"#,
                r#"13="ob""#,
                r#"13+="j""#,
                r#"2+={"uncle":"$ke$14"}"#,
                r#"14="Sa""#,
                r#"14+="m""#,
            ].to_vec()
        ),
        (
            json!({
                "h1":"Kurocoの特徴",
                "introduction":"Kurocoの特徴は以下の通りです。",
                "contents":[
                   {
                      "h2":"複数の会社が同時に開発できる",
                      "paragraph":[
                         {
                            "text":"API連携による高速開発が可能で、タイムラグのない開発体験を提供します",
                            "references":[
                               "1",
                               "2"
                            ]
                         },
                         {
                            "text":"管理画面からAPIを設計することによって、柔軟でスムーズな開発が実現します",
                            "references":[
                               "1",
                               "2"
                            ]
                         }
                      ]
                   },
            ]}),
            [
                r#"0={}"#,
                r#"0+={"h1":"$ke$1"}"#,
                r#"1="Ku""#,
                r#"1+="ro""#,
                r#"1+="co""#,
                r#"1+="の""#,
                r#"1+="特""#,
                r#"1+="徴""#,
                r#"0+={"introduction":"$ke$2"}"#,
                r#"2="Ku""#,
                r#"2+="ro""#,
                r#"2+="co""#,
                r#"2+="の""#,
                r#"2+="特""#,
                r#"2+="徴""#,
                r#"2+="は""#,
                r#"2+="以""#,
                r#"2+="下""#,
                r#"2+="の""#,
                r#"2+="通""#,
                r#"2+="り""#,
                r#"2+="で""#,
                r#"2+="す""#,
                r#"2+="。""#,
                r#"0+={"contents":"$ke$3"}"#,
                r#"3=[]"#,
                r#"3+="$ke$4""#,
                r#"4={}"#,
                r#"4+={"h2":"$ke$5"}"#,
                r#"5="複""#,
                r#"5+="数""#,
                r#"5+="の""#,
                r#"5+="会""#,
                r#"5+="社""#,
                r#"5+="が""#,
                r#"5+="同""#,
                r#"5+="時""#,
                r#"5+="に""#,
                r#"5+="開""#,
                r#"5+="発""#,
                r#"5+="で""#,
                r#"5+="き""#,
                r#"5+="る""#,
                r#"4+={"paragraph":"$ke$6"}"#,
                r#"6=[]"#,
                r#"6+="$ke$7""#,
                r#"7={}"#,
                r#"7+={"text":"$ke$8"}"#,
                r#"8="AP""#,
                r#"8+="I連""#,
                r#"8+="携""#,
                r#"8+="に""#,
                r#"8+="よ""#,
                r#"8+="る""#,
                r#"8+="高""#,
                r#"8+="速""#,
                r#"8+="開""#,
                r#"8+="発""#,
                r#"8+="が""#,
                r#"8+="可""#,
                r#"8+="能""#,
                r#"8+="で""#,
                r#"8+="、""#,
                r#"8+="タ""#,
                r#"8+="イ""#,
                r#"8+="ム""#,
                r#"8+="ラ""#,
                r#"8+="グ""#,
                r#"8+="の""#,
                r#"8+="な""#,
                r#"8+="い""#,
                r#"8+="開""#,
                r#"8+="発""#,
                r#"8+="体""#,
                r#"8+="験""#,
                r#"8+="を""#,
                r#"8+="提""#,
                r#"8+="供""#,
                r#"8+="し""#,
                r#"8+="ま""#,
                r#"8+="す""#,
                r#"7+={"references":"$ke$9"}"#,
                r#"9=[]"#,
                r#"9+="$ke$10""#,
                r#"10="1""#,
                r#"9+="$ke$11""#,
                r#"11="2""#,
                r#"6+="$ke$12""#,
                r#"12={}"#,
                r#"12+={"text":"$ke$13"}"#,
                r#"13="管""#,
                r#"13+="理""#,
                r#"13+="画""#,
                r#"13+="面""#,
                r#"13+="か""#,
                r#"13+="ら""#,
                r#"13+="AP""#,
                r#"13+="Iを""#,
                r#"13+="設""#,
                r#"13+="計""#,
                r#"13+="す""#,
                r#"13+="る""#,
                r#"13+="こ""#,
                r#"13+="と""#,
                r#"13+="に""#,
                r#"13+="よ""#,
                r#"13+="っ""#,
                r#"13+="て""#,
                r#"13+="、""#,
                r#"13+="柔""#,
                r#"13+="軟""#,
                r#"13+="で""#,
                r#"13+="ス""#,
                r#"13+="ム""#,
                r#"13+="ー""#,
                r#"13+="ズ""#,
                r#"13+="な""#,
                r#"13+="開""#,
                r#"13+="発""#,
                r#"13+="が""#,
                r#"13+="実""#,
                r#"13+="現""#,
                r#"13+="し""#,
                r#"13+="ま""#,
                r#"13+="す""#,
                r#"12+={"references":"$ke$14"}"#,
                r#"14=[]"#,
                r#"14+="$ke$15""#,
                r#"15="1""#,
                r#"14+="$ke$16""#,
                r#"16="2""#,
            ].to_vec()
        )
    ];
    for (to_test, result) in json_to_test {
        let idx_generator = RefIndexGenerator::new();
        let chunker = JsonProtocolChunker::new(to_test, idx_generator, 0);
        let chunk_iter = chunker.chunks(2);
        for (chunk_idx, chunk) in chunk_iter.enumerate() {
            assert_eq!(chunk.as_str(), format!("{}\n", result[chunk_idx]).as_str())
        }
    }
}